name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov

      - name: Run duplicate check
        run: |
          python -m scripts.check_duplicates

      - name: Run tests (unit)
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || '' }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || '' }}
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=app --cov-report=xml --cov-report=term

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

      - name: Optional adapter tests (only if API keys)
        if: ${{ secrets.GEMINI_API_KEY != '' || secrets.OPENAI_API_KEY != '' }}
        run: |
          echo "Probando adaptadores reales..."
          python - <<'EOF'
import os
from app.api.llm_adapters import get_llm_adapter
try:
    adapter = get_llm_adapter()
    r = adapter.generate_content("Prueba corta")
    print("Respuesta LLM ok, longitud:", len(r.text))
except Exception as e:
    print("Fallo adaptador:", e)
    exit(1)
EOF

  report_generator:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps minimal
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Smoke test report generator
        run: |
          python - <<'EOF'
from app.api.report_generator import AdvancedReportGenerator
rg = AdvancedReportGenerator()
patient = {"edad": 60, "sexo": "m"}
labs = {"creatinina": {"valor": 1.2, "unidad": "mg/dL"}}
res = rg.process_patient_data(patient, labs)
assert 'report' in res
print('OK report length:', len(res['report']))
EOF
