#!/usr/bin/env python3
"""
üöî ERC INSIGHT POLICE WATCHDOG - PARTE 1 DEMO
Sistema aut√≥nomo de monitoreo, integridad y enforcement para Flask App

VERSI√ìN SIMPLIFICADA PARA DEMOSTRACI√ìN
Author: ERC Insight Team
Version: 1.0.0
"""

import os
import sys
import json
import time
import logging
import traceback
from datetime import datetime, timedelta
from threading import Thread, Lock, Event
from pathlib import Path
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
from enum import Enum
import sqlite3
import hashlib

# Importaciones opcionales
try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False
    print("‚ö†Ô∏è psutil no disponible - algunas m√©tricas de sistema estar√°n deshabilitadas")

try:
    from apscheduler.schedulers.background import BackgroundScheduler
    from apscheduler.triggers.interval import IntervalTrigger
    SCHEDULER_AVAILABLE = True
except ImportError:
    SCHEDULER_AVAILABLE = False
    print("‚ö†Ô∏è APScheduler no disponible - usando timer b√°sico")

# ============================================================================
# üîß CONFIGURACI√ìN GLOBAL DEL SISTEMA POLIC√çA
# ============================================================================

class AlertLevel(Enum):
    """Niveles de alertas del sistema"""
    INFO = "INFO"
    WARNING = "WARNING" 
    CRITICAL = "CRITICAL"
    EMERGENCY = "EMERGENCY"

class RuleCategory(Enum):
    """Categor√≠as de reglas m√©dicas"""
    TFG_CALCULATION = "tfg_calculation"
    ERC_CLASSIFICATION = "erc_classification"
    LAB_VALIDITY = "lab_validity"
    THERAPEUTIC_GOALS = "therapeutic_goals"
    DATA_INTEGRITY = "data_integrity"
    PERFORMANCE = "performance"
    SECURITY = "security"

@dataclass
class MonitoringConfig:
    """Configuraci√≥n principal del sistema de monitoreo"""
    # Rutas y archivos
    app_root: str = r"c:\Users\brandon\Desktop\ERC"
    log_file: str = "logs/erc_police.log"
    db_file: str = "erc_police.db"
    config_file: str = "config/police_config.json"
    
    # Intervalos de monitoreo (segundos)
    file_check_interval: int = 30
    performance_check_interval: int = 60
    health_check_interval: int = 120
    medical_rules_check_interval: int = 300
    
    # L√≠mites y umbrales
    max_cpu_percent: float = 85.0
    max_memory_percent: float = 80.0
    max_response_time: float = 3.0
    min_disk_space_gb: float = 1.0
    
    # Archivos cr√≠ticos a monitorear
    critical_files: List[str] = None
    
    def __post_init__(self):
        if self.critical_files is None:
            self.critical_files = [
                "app/__init__.py",
                "app/logic/patient_eval.py", 
                "app/logic/advanced_patient_eval.py",
                "run.py",
                "wsgi.py",
                "config.py"
            ]

@dataclass
class HealthStatus:
    """Estado de salud del sistema"""
    timestamp: datetime
    cpu_percent: float = 0.0
    memory_percent: float = 0.0
    disk_space_gb: float = 0.0
    active_connections: int = 0
    response_time: float = 0.0
    errors_last_hour: int = 0
    status: str = "HEALTHY"

# ============================================================================
# üóÑÔ∏è SISTEMA DE BASE DE DATOS LOCAL
# ============================================================================

class PoliceDatabase:
    """Base de datos local para el sistema polic√≠a"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.lock = Lock()
        self._init_database()
    
    def _init_database(self):
        """Inicializa las tablas de la base de datos"""
        try:
            os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
        except:
            pass
            
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # Tabla de eventos de monitoreo
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS monitoring_events (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT NOT NULL,
                    event_type TEXT NOT NULL,
                    severity TEXT NOT NULL,
                    description TEXT NOT NULL,
                    details TEXT,
                    resolved BOOLEAN DEFAULT FALSE,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Tabla de m√©tricas de salud
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS health_metrics (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT NOT NULL,
                    cpu_percent REAL,
                    memory_percent REAL,
                    disk_space_gb REAL,
                    response_time REAL,
                    status TEXT,
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            conn.commit()
            print("‚úÖ Base de datos inicializada correctamente")
    
    def log_event(self, event_type: str, severity: AlertLevel, description: str, details: Dict = None):
        """Registra un evento de monitoreo"""
        with self.lock:
            try:
                with sqlite3.connect(self.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute("""
                        INSERT INTO monitoring_events 
                        (timestamp, event_type, severity, description, details)
                        VALUES (?, ?, ?, ?, ?)
                    """, (
                        datetime.now().isoformat(),
                        event_type,
                        severity.value,
                        description,
                        json.dumps(details) if details else None
                    ))
                    conn.commit()
                    print(f"üìù Evento registrado: {severity.value} - {description}")
            except Exception as e:
                print(f"‚ùå Error al registrar evento: {e}")

# ============================================================================
# üîç SISTEMA DE LOGGING B√ÅSICO
# ============================================================================

class ERCPoliceLogger:
    """Logger b√°sico para el sistema polic√≠a"""
    
    def __init__(self, config: MonitoringConfig):
        self.config = config
        self._setup_logging()
        self.db = PoliceDatabase(os.path.join(config.app_root, config.db_file))
    
    def _setup_logging(self):
        """Configura el sistema de logging"""
        log_path = os.path.join(self.config.app_root, self.config.log_file)
        try:
            os.makedirs(os.path.dirname(log_path), exist_ok=True)
        except:
            pass
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_path),
                logging.StreamHandler(sys.stdout)
            ]
        )
        
        self.logger = logging.getLogger("ERC_POLICE")
        print("‚úÖ Sistema de logging configurado")
    
    def info(self, message: str, **kwargs):
        self.logger.info(f"{message} {kwargs}")
    
    def warning(self, message: str, **kwargs):
        self.logger.warning(f"{message} {kwargs}")
        self.db.log_event("WARNING", AlertLevel.WARNING, message, kwargs)
    
    def critical(self, message: str, **kwargs):
        self.logger.critical(f"{message} {kwargs}")
        self.db.log_event("CRITICAL", AlertLevel.CRITICAL, message, kwargs)

# ============================================================================
# üéØ CLASE PRINCIPAL DEL SISTEMA POLIC√çA
# ============================================================================

class ERCPoliceWatchdog:
    """
    Sistema principal de monitoreo y enforcement para ERC Insight
    VERSI√ìN DEMO PARA PARTE 1
    """
    
    def __init__(self, config: MonitoringConfig = None):
        self.config = config or MonitoringConfig()
        self.logger = ERCPoliceLogger(self.config)
        self.db = self.logger.db
        
        # Estado del sistema
        self.is_running = False
        self.stop_event = Event()
        
        # Cache de archivos monitoreados
        self.file_hashes: Dict[str, str] = {}
        
        self.logger.info("üöî ERC Police Watchdog inicializado", config=asdict(self.config))
        print("‚úÖ Watchdog inicializado exitosamente")
    
    def start(self):
        """Inicia el sistema de monitoreo"""
        if self.is_running:
            self.logger.warning("El sistema ya est√° ejecut√°ndose")
            return
        
        self.logger.info("üöÄ Iniciando ERC Police Watchdog...")
        print("üöÄ Iniciando ERC Police Watchdog...")
        
        try:
            self.is_running = True
            
            # Inicializar hashes de archivos
            self._initialize_file_monitoring()
            
            # Simular m√©tricas de sistema
            self._demo_system_check()
            
            self.logger.info("‚úÖ ERC Police Watchdog iniciado exitosamente")
            print("‚úÖ ERC Police Watchdog iniciado exitosamente")
            
        except Exception as e:
            self.logger.critical("‚ùå Error al iniciar el sistema", error=str(e))
            print(f"‚ùå Error al iniciar el sistema: {e}")
            self.stop()
    
    def stop(self):
        """Detiene el sistema de monitoreo"""
        if not self.is_running:
            return
        
        self.logger.info("üõë Deteniendo ERC Police Watchdog...")
        print("üõë Deteniendo ERC Police Watchdog...")
        
        try:
            self.is_running = False
            self.stop_event.set()
            
            self.logger.info("‚úÖ ERC Police Watchdog detenido exitosamente")
            print("‚úÖ ERC Police Watchdog detenido exitosamente")
            
        except Exception as e:
            self.logger.critical("‚ùå Error al detener el sistema", error=str(e))
            print(f"‚ùå Error al detener el sistema: {e}")
    
    def _initialize_file_monitoring(self):
        """Inicializa el monitoreo de archivos cr√≠ticos"""
        print("üìÅ Inicializando monitoreo de archivos cr√≠ticos...")
        
        for file_path in self.config.critical_files:
            full_path = os.path.join(self.config.app_root, file_path)
            if os.path.exists(full_path):
                file_hash = self._calculate_file_hash(full_path)
                self.file_hashes[file_path] = file_hash
                self.logger.info("üìÅ Archivo a√±adido al monitoreo", file=file_path, hash=file_hash[:8])
                print(f"  ‚úÖ {file_path} (hash: {file_hash[:8]}...)")
            else:
                print(f"  ‚ö†Ô∏è {file_path} (no encontrado)")
    
    def _calculate_file_hash(self, file_path: str) -> str:
        """Calcula el hash MD5 de un archivo"""
        hash_md5 = hashlib.md5()
        try:
            with open(file_path, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    hash_md5.update(chunk)
            return hash_md5.hexdigest()
        except Exception as e:
            self.logger.warning("Error calculando hash", file=file_path, error=str(e))
            return ""
    
    def _demo_system_check(self):
        """Demostraci√≥n de chequeos del sistema"""
        print("üè• Ejecutando chequeos de demostraci√≥n...")
        
        # Simular m√©tricas b√°sicas
        if PSUTIL_AVAILABLE:
            cpu_percent = psutil.cpu_percent()
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            print(f"  üíª CPU: {cpu_percent:.1f}%")
            print(f"  üß† Memoria: {memory.percent:.1f}%")
            print(f"  üíæ Disco: {disk.percent:.1f}%")
            
            # Simular alerta si los valores son altos
            if cpu_percent > self.config.max_cpu_percent:
                self.logger.warning("Alto uso de CPU detectado", cpu=cpu_percent)
            
        else:
            print("  ‚ö†Ô∏è M√©tricas de sistema no disponibles (psutil no instalado)")
        
        # Verificar archivos cr√≠ticos
        print("üîç Verificando integridad de archivos cr√≠ticos...")
        modified_files = 0
        
        for file_path, old_hash in self.file_hashes.items():
            full_path = os.path.join(self.config.app_root, file_path)
            if os.path.exists(full_path):
                new_hash = self._calculate_file_hash(full_path)
                if new_hash != old_hash:
                    modified_files += 1
                    self.logger.warning("Archivo modificado detectado", 
                                      file=file_path, 
                                      old_hash=old_hash[:8], 
                                      new_hash=new_hash[:8])
                    print(f"  üîÑ {file_path} - MODIFICADO")
                else:
                    print(f"  ‚úÖ {file_path} - OK")
        
        if modified_files == 0:
            print("  ‚úÖ Todos los archivos cr√≠ticos est√°n √≠ntegros")
        
        # Simular chequeo de reglas m√©dicas
        print("‚öïÔ∏è Simulando chequeo de reglas m√©dicas ERC...")
        self._demo_medical_rules_check()
    
    def _demo_medical_rules_check(self):
        """Demostraci√≥n de chequeos de reglas m√©dicas"""
        
        # Simular validaci√≥n de c√°lculo de TFG
        test_cases = [
            {"edad": 65, "peso": 70, "creatinina": 1.2, "sexo": "f"},
            {"edad": 45, "peso": 80, "creatinina": 0.9, "sexo": "m"},
            {"edad": 70, "peso": 65, "creatinina": 1.8, "sexo": "f"}
        ]
        
        for i, case in enumerate(test_cases, 1):
            # Simular c√°lculo TFG (f√≥rmula Cockcroft-Gault)
            factor_sexo = 0.85 if case["sexo"] == "f" else 1.0
            tfg = ((140 - case["edad"]) * case["peso"] * factor_sexo) / (72 * case["creatinina"])
            
            # Determinar etapa ERC
            if tfg >= 90: etapa = "G1"
            elif tfg >= 60: etapa = "G2"  
            elif tfg >= 45: etapa = "G3a"
            elif tfg >= 30: etapa = "G3b"
            elif tfg >= 15: etapa = "G4"
            else: etapa = "G5"
            
            print(f"  üë§ Caso {i}: TFG={tfg:.1f} ml/min ‚Üí Etapa {etapa}")
            
            # Simular validaci√≥n de regla m√©dica
            if tfg < 15:  # Etapa G5
                self.logger.critical("Paciente en etapa G5 detectado - Requiere atenci√≥n urgente",
                                   tfg=tfg, etapa=etapa, case=case)
                print(f"    üö® ALERTA CR√çTICA: Paciente requiere di√°lisis")
            elif tfg < 30:  # Etapa G4
                self.logger.warning("Paciente en etapa G4 detectado - Preparaci√≥n para TRS",
                                  tfg=tfg, etapa=etapa)
                print(f"    ‚ö†Ô∏è ALERTA: Preparar para terapia de reemplazo renal")


# ============================================================================
# üéÆ PUNTO DE ENTRADA PRINCIPAL
# ============================================================================

def main():
    """Funci√≥n principal para ejecutar el watchdog - DEMO PARTE 1"""
    print("="*80)
    print("üöî ERC INSIGHT POLICE WATCHDOG - PARTE 1 DEMO")
    print("="*80)
    print("‚úÖ Imports y configuraci√≥n listos")
    print("‚úÖ Sistema de base de datos inicializado")
    print("‚úÖ Logger b√°sico configurado") 
    print("‚úÖ Clase principal ERCPoliceWatchdog creada")
    print("="*80)
    print("üîÑ Ejecutando demostraci√≥n de funcionalidad base...")
    print()
    
    # Crear instancia de configuraci√≥n
    config = MonitoringConfig()
    
    # Crear el watchdog
    watchdog = ERCPoliceWatchdog(config)
    
    try:
        # Ejecutar demo
        watchdog.start()
        print()
        print("üéØ DEMO COMPLETADA - El sistema base est√° funcionando")
        print("üìä Revisa el archivo 'logs/erc_police.log' para ver los logs detallados")
        print("üóÑÔ∏è Revisa el archivo 'erc_police.db' para ver los eventos registrados")
        print()
        print("‚è≥ El sistema continuar√° ejecut√°ndose por 10 segundos...")
        
        # Simular ejecuci√≥n por 10 segundos
        for i in range(10, 0, -1):
            print(f"  ‚è∞ {i} segundos restantes...", end='\r')
            time.sleep(1)
        
        print("\n")
        watchdog.stop()
        
        print("="*80)
        print("üéâ PARTE 1 COMPLETADA EXITOSAMENTE")
        print("üìã PR√ìXIMO PASO: Implementar PARTE 2 (Funciones de chequeo y enforcement)")
        print("üîÑ LUEGO: Implementar PARTE 3 (Alertas, manejo de errores y tests)")
        print("="*80)
            
    except KeyboardInterrupt:
        print("\nüõë Deteniendo sistema...")
        watchdog.stop()
        print("‚úÖ Sistema detenido exitosamente")
    except Exception as e:
        print(f"\n‚ùå Error durante la ejecuci√≥n: {e}")
        watchdog.stop()

if __name__ == "__main__":
    main()
